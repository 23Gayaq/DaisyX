"""
Copyright (c) 2021 TheHamkerCat
Only For Private Use For DaisyX And Wbb. 

"""

from DaisyX import OWNER_ID, SUDO_USERS
from DaisyX.services.pyrogram import pbot as app
from DaisyX.function.pluginhelpers import admins_only
from DaisyX.config import get_int_key, get_str_key
from pyrogram import filters
from pyrogram import Client

flood = {}

active_chats_ubot = []

""" PM PERMIT BY THE HAMKER CAT """

API_ID = get_int_key("APP_ID", required=True)
API_HASH = get_str_key("APP_HASH", required=True)
SESSION_STRING = get_str_key("STRING_SESSION", required=True) 


app2 = Client(
        SESSION_STRING,
        api_id=API_ID,
        api_hash=API_HASH
    )


async def is_pmpermit_approved(user_id: int) -> bool:
    user = await pmpermitdb.find_one({"user_id": user_id})
    if not user:
        return False
    return True


async def approve_pmpermit(user_id: int):
    is_pmpermit = await is_pmpermit_approved(user_id)
    if is_pmpermit:
        return
    return await pmpermitdb.insert_one({"user_id": user_id})


async def disapprove_pmpermit(user_id: int):
    is_pmpermit = await is_pmpermit_approved(user_id)
    if not is_pmpermit:
        return
    return await pmpermitdb.delete_one({"user_id": user_id})



@app2.on_message(filters.private & ~filters.edited & ~filters.me & ~filters.bot & ~filters.user(SUDO_USERS))
@admins_only
async def pmpermit_func(_, message):
    user_id = message.from_user.id
    if await is_pmpermit_approved(user_id):
        return
    async for m in app2.iter_history(user_id, limit=6):
        if m.reply_markup:
            await m.delete()
    if str(user_id) in flood:
        flood[str(user_id)] += 1
    else:
        flood[str(user_id)] = 1
    if flood[str(user_id)] > 5:
        await app2.block_user(user_id)
        await message.reply_text("SPAM DETECTED, USER BLOCKED.")
        return
    results = await app2.get_inline_bot_results(BOT_ID, "pmpermit")
    await app2.send_inline_bot_result(
            user_id,
            results.query_id,
            results.results[0].id,
            hide_via=True
            )


@app2.on_message(filters.command("approve", prefixes=".") & filters.user(SUDO_USERS) & ~filters.via_bot)
@admins_only
async def pm_approve(_, message):
    if not message.reply_to_message:
        await message.edit("Reply to a user's message to approve.")
        return
    user_id = message.reply_to_message.from_user.id
    if await is_pmpermit_approved(user_id):
        await message.edit("User is already approved to pm")
        return
    await approve_pmpermit(user_id)
    await message.edit("User is approved to pm")


@app2.on_message(filters.command("disapprove", prefixes=".") & filters.user(SUDO_USERS) & ~filters.via_bot)
@admins_only
async def pm_disapprove(_, message):
    if not message.reply_to_message:
        await message.edit("Reply to a user's message to approve.")
        return
    user_id = message.reply_to_message.from_user.id
    if not await is_pmpermit_approved(user_id):
        await message.edit("User is already disapproved to pm")
        async for m in app2.iter_history(user_id, limit=6):
            if m.reply_markup:
                try:
                    await m.delete()
                except Exception:
                    pass
        return
    await disapprove_pmpermit(user_id)
    await message.edit("User is disapproved to pm")


@app2.on_message(filters.command("block", prefixes=".") & filters.user(SUDO_USERS) & ~filters.via_bot)
@admins_only
async def block_user_func(_, message):
    if not message.reply_to_message:
        await message.edit("Reply to a user's message to approve.")
        return
    user_id = message.reply_to_message.from_user.id
    await app2.block_user(user_id)
    await message.edit("Successfully blocked the user")


@app2.on_message(filters.command("unblock", prefixes=".") & filters.user(SUDO_USERS) & ~filters.via_bot)
@admins_only
async def unblock_user_func(_, message):
    if not message.reply_to_message:
        await message.edit("Reply to a user's message to approve.")
        return
    user_id = message.reply_to_message.from_user.id
    await app2.unblock_user(user_id)
    await message.edit("Successfully Unblocked the user")


""" CALLBACK QUERY HANDLER """


@app.on_callback_query(filters.regex("pmpermit"))
@admins_only
async def pmpermit_cq(_, cq):
    global active_chats_ubot
    user_id = cq.from_user.id
    if user_id == OWNER_ID:
        await cq.answer("It's For The Other Person.")
        return
    data = cq.data.split(None, 1)[1]
    if data == "to_scam_you":
        async for m in app2.iter_history(user_id, limit=6):
            if m.reply_markup:
                await m.delete()
        await app2.send_message(user_id, "Blocked, Go scam someone else.")
        await app2.block_user(user_id)

    elif data == "approve_me":
        await app2.send_message(user_id, "I'm busy right now, will approve you shortly, DO NOT SPAM.")

    elif data == "chitchats":
        await approve_pmpermit(user_id)
        active_chats_ubot.append(user_id)
        await app2.send_message(user_id, "Hello")
